<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.zfk" />

	<!-- <context:annotation-config></context:annotation-config> -->

	<!-- 引入配置文件 -->
	<!-- <bean id="propertyConfigurer" -->
	<!-- class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<!-- <property name="location" value="classpath:db.properties" /> -->
	<!-- </bean> -->

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:db.properties</value>
				<value>classpath*:application.properties</value>
				<!-- <value>classpath*:redis.properties</value> -->
			</list>
		</property>
	</bean>
	

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- 实例化jdbcTemplate,同时注入数据源 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" -->
	<!-- p:dataSource-ref="dataSource" /> -->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/zfk/dao/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名， 扫描mybatis映射接口类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zfk.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 对insert,create,update,modify,delete,remove 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"
				read-only="false" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="modify*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<!-- find,get,select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置参与事务的类，切入点 -->
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(public * com.zfk.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>

	<!-- 配置使Spring采用CGLIB代理 --><!-- 开启基于@AspectJ切面的注解处理器 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />


	<!-- 页面元数据 -->
	<bean id="metaDataAdvice" class="com.zfk.base.advice.MetaDataAdvice"/>
	<bean id="singleLoginAdvice" class="com.zfk.base.advice.SingleLoginAdvice"/>
	<aop:config>
		<aop:pointcut id="controllerMethods" expression="execution(* com.*.*.controller.*.*(..)) or execution(* com.zfk.controller.*.*(..))" />
		<aop:pointcut id="loginControllerMethods" expression="execution(* com.zfk.controller.LoginController.login(..))" />
		<aop:advisor advice-ref="metaDataAdvice" pointcut-ref="controllerMethods" />
		<aop:advisor advice-ref="singleLoginAdvice" pointcut-ref="loginControllerMethods" />
	</aop:config>
</beans>